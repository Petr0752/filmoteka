basePath: /
definitions:
  controller.loginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.ActorDTO:
    properties:
      birth_date:
        type: string
      gender:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.MovieDTO:
    properties:
      description:
        type: string
      id:
        type: integer
      rating:
        type: number
      release_date:
        type: string
      title:
        type: string
    type: object
  model.Actor:
    properties:
      birth_date:
        type: string
      gender:
        type: string
      id:
        type: integer
      movies:
        items:
          $ref: '#/definitions/model.Movie'
        type: array
      name:
        type: string
    type: object
  model.Movie:
    properties:
      actors:
        items:
          $ref: '#/definitions/model.Actor'
        type: array
      description:
        type: string
      id:
        type: integer
      rating:
        type: number
      release_date:
        type: string
      title:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: REST API для управления базой данных фильмов и актёров
  title: Filmoteka API
  version: "1.0"
paths:
  /actors:
    post:
      consumes:
      - application/json
      parameters:
      - description: Актёр
        in: body
        name: actor
        required: true
        schema:
          $ref: '#/definitions/dto.ActorDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              format: int64
              type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Создать нового актёра
      tags:
      - Актёры
  /actors/{id}:
    delete:
      parameters:
      - description: ID актёра
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: no content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удалить актёра
      tags:
      - Актёры
    get:
      parameters:
      - description: ID актёра
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Actor'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить актёра по ID
      tags:
      - Актёры
    patch:
      consumes:
      - application/json
      parameters:
      - description: ID актёра
        in: path
        name: id
        required: true
        type: integer
      - description: Актёр
        in: body
        name: actor
        required: true
        schema:
          $ref: '#/definitions/dto.ActorDTO'
      produces:
      - application/json
      responses:
        "204":
          description: no content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Обновить данные актёра
      tags:
      - Актёры
  /actors/list:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Actor'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить список актёров
      tags:
      - Актёры
  /login:
    post:
      consumes:
      - application/json
      description: Получение JWT токена по логину и паролю
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controller.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Авторизация
      tags:
      - auth
  /movies:
    post:
      consumes:
      - application/json
      parameters:
      - description: Фильм
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/dto.MovieDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              format: int64
              type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Создать новый фильм
      tags:
      - Фильмы
  /movies/{id}:
    delete:
      parameters:
      - description: ID фильма
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Удалено
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удалить фильм
      tags:
      - Фильмы
    patch:
      consumes:
      - application/json
      parameters:
      - description: ID фильма
        in: path
        name: id
        required: true
        type: integer
      - description: Фильм
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/dto.MovieDTO'
      produces:
      - application/json
      responses:
        "204":
          description: Обновлено
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Обновить фильм
      tags:
      - Фильмы
  /movies/{movie_id}/actors/{actor_id}:
    post:
      parameters:
      - description: ID фильма
        in: path
        name: movie_id
        required: true
        type: integer
      - description: ID актёра
        in: path
        name: actor_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Добавлено
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Добавить актёра к фильму
      tags:
      - Фильмы
  /movies/list:
    get:
      parameters:
      - description: 'Сортировка: title | rating | release_date (по умолчанию по рейтингу
          убыв.)'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Movie'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить список фильмов
      tags:
      - Фильмы
  /movies/search:
    get:
      parameters:
      - description: Поисковый запрос
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Movie'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Поиск фильмов
      tags:
      - Фильмы
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
